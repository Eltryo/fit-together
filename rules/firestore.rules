rules_version = '2';
service cloud.firestore {
    match /databases/{database}/documents {
        function tryGet(path) {
            return exists(path) ? get(path) : null;
        }

        function userOfPostIsPublic(ownerId) {
            let doc = tryGet(/databases/$(database)/documents/users/$(ownerId));
            return doc != null ? (doc.data.visibility == 'public') : false;
        }

        function isUser(userId) {
            return request.auth != null && request.auth.uid == userId;
        }

        function emailValid(email) {
            return email.matches('^[A-Z\\d._%+-]+@[A-Z\\d.-]+\\.[a-z]{2,4}$');
        }

        function usernameValid(username) {
            return username.matches('^[A-Za-z][A-Za-z0-9_]{7,29}$');
        }

        function userFieldTypesValid(userDoc) {
            return userDoc.username is string &&
                   userDoc.email is string &&
                   userDoc.appUserStats is map &&
                   userDoc.visibility is string &&
                   userDoc.get('firstName', '') is string &&
                   userDoc.get('lastName', '') is string &&
                   userDoc.get('imageUrl', '') is string
        }

        function postFieldTypesValid(postDoc) {
            return postDoc.path is string &&
                   postDoc.ownerId is string;
        }

        function userHasAllFields(keys) {
            return keys.hasAll(['username', 'email', 'appUserStats', 'visibility'])
        }

        function postHasAllFields(keys) {
            return keys.hasAll(['path', 'ownerId'])
        }

        function userDocIsValid(data) {
            return usernameValid(data.username) &&
                   emailValid(data.email) &&
                   userHasAllFields(data.keys()) &&
                   userFieldTypesValid(data);
        }

        function postDocIsValid(data) {
            return postHasAllFields(data.keys()) &&
                   postFieldTypesValid(data);
        }

        match /users/{userId} {
            //TODO: test list allow method
            allow list: if isUser(userId) && request.query.limit <= 10;
            allow read: if isUser(userId) || resource.data.visibility == 'public';
            allow update: if isUser(userId) &&
                             userDocIsValid(request.resource.data) &&
                             !request.resource.data.diff(resource.data).affectedKeys().hasAny(['appUserStats']);
            allow delete: if isUser(userId);
            allow create: if isUser(request.resource) &&
                             userDocIsValid(request.resource.data) &&
                             request.auth.token.firebase.sign_in_provider != 'anonymous';
        }

        match /posts/{postId} {
            //TODO: test list allow method
            allow list: if (isUser(resource.data.ownerId) || userOfPostIsPublic(resource.data.ownerId)) && request.query.limit <= 20;
            allow read: if isUser(resource.data.ownerId) || userOfPostIsPublic(resource.data.ownerId);
            allow update: if isUser(resource.data.ownerId) &&
                             postDocIsValid(request.resource.data) &&
                             //TODO: test condition
                             !request.resource.data.diff(resource.data).affectedKeys().hasAny(['path', 'ownerId']);
            allow delete: if isUser(resource.data.ownerId);
            allow create: if isUser(request.resource.data.ownerId) &&
                             postDocIsValid(request.resource.data) &&
                             request.auth.token.firebase.sign_in_provider != 'anonymous';
        }
    }
}
