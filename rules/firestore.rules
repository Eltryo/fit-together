rules_version = '2';
service cloud.firestore {
    match /databases/{database}/documents {
        function tryGet(path){
            return exists(path) ? get(path) : null;
        }

        function userOfPostIsPublic(ownerId) {
            let doc = tryGet(/databases/$(database)/documents/users/$(ownerId));
            return doc != null ? (doc.data.visibility == 'public') : true;
        }

        function isUser(userId) {
            return request.auth != null && request.auth.uid == userId;
        }

        function emailValid(email) {
            return email.matches('^[A-Z\\d._%+-]+@[A-Z\\d.-]+\\.[A-Z]{2,4}$');
        }

        function usernameValid(username) {
            return username.matches('^[A-Za-z][A-Za-z0-9_]{7,29}$');
        }

        function userFieldTypesValid(userDoc) {
            return userDoc.username is string &&
                   userDoc.email is string &&
                   userDoc.appUserStats is map &&
                   userDoc.visibility is string &&
                   userDoc.get('firstName', '') is string &&
                   userDoc.get('lastName', '') is string &&
                   userDoc.get('imageUrl', '') is string
        }

        function postFieldTypesValid(postDoc) {
            return postDoc.path is string &&
                   postDoc.ownerId is string;
        }

        function userHasAllFields(keys) {
            return keys.hasAll(['username', 'email', 'appUserStats', 'visibility'])
        }

        function postHasAllFields(keys) {
            return keys.hasAll(['path', 'ownerId'])
        }

        match /users/{userId} {
            allow read: if isUser(userId) || resource.data.visibility == 'public';
            allow update: if usernameValid(request.resource.data.username) &&
                             emailValid(request.resource.data.email) &&
                             userFieldTypesValid(request.resource.data);
            allow delete: if isUser(userId);
            allow create: if userHasAllFields(request.resource.data.keys()) &&
                             userFieldTypesValid(request.resource.data) &&
                             request.auth != null &&
                             request.auth.token.firebase.sign_in_provider != 'anonymous';
        }

        match /posts/{postId} {
            allow read: if isUser(resource.data.ownerId) || userOfPostIsPublic(resource.data.ownerId);
            //TODO: add more rules to update
            allow update: if postFieldTypesValid(request.resource.data);
            allow delete: if isUser(resource.data.ownerId);
            allow create: if postHasAllFields(request.resource.data.keys()) &&
                             postFieldTypesValid(request.resource.data) &&
                             request.auth != null &&
                             request.auth.token.firebase.sign_in_provider != 'anonymous';
        }
    }
}
